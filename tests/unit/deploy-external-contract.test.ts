import { describe, expect, it } from 'bun:test'
import {
  GET_HUMAN_READABLE_UINT_MAX_SUPPLY,
  sdk,
  TEST_ORCHESTRATOR_FACTORY_ADDRESS,
} from 'tests/helpers'

describe('#DEPLOY_EXTERNAL_CONTRACT', () => {
  let tokenAddress: `0x${string}`

  it('Should deploy an external contract, with generated bytecode', async () => {
    // Get the factory module
    const factory = sdk.getModule({
      name: 'OrchestratorFactory_v1',
      address: TEST_ORCHESTRATOR_FACTORY_ADDRESS,
    })

    const tokenDeployment = await sdk.deploy.bytecode({
      name: 'ERC20Issuance_v1',
      args: {
        symbol: 'TEST',
        name: 'TEST',
        decimals: 18,
        maxSupply: GET_HUMAN_READABLE_UINT_MAX_SUPPLY(18),
        initialAdmin: sdk.walletClient.account.address,
      },
    })

    const tokenBytecode = await tokenDeployment.run()

    const trustedForwarderAddress = await factory.read.trustedForwarder.run()

    const result = await sdk.moduleMulticall.write({
      trustedForwarderAddress,
      call: [
        {
          address: factory.address,
          allowFailure: false,
          callData: tokenBytecode,
        },
      ],
    })

    tokenAddress = await factory.bytecode.deployExternalContract.decodeResult(
      result.returnDatas[0]
    )

    expect(result.statuses[0]).toBe('success')
    expect(result.returnDatas[0]).toBeString()
    expect(result.transactionHash).toBeString()
  })

  it('Should read the totalSupply of the token', async () => {
    const token = sdk.getModule({
      name: 'ERC20Issuance_v1',
      address: tokenAddress,
      tagConfig: {
        decimals: 18,
      },
    })

    const totalSupply = await token.read.totalSupply.run()

    expect(totalSupply).toBeString()
    expect(totalSupply).toBe('0')
  })
})
